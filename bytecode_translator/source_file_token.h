#ifndef SOURCE_FILE_TOKEN_H
#define SOURCE_FILE_TOKEN_H

//All tokens that can be generated by the source file parser.
enum class source_file_token {
    end_of_file,
    name,
    coma, //,
    comment_start, //tokens inside comments will be simply ignored
    comment_end,
    import_start,  //from ... import <> (<)
    import_end,	   //(>)
    from_keyword,
    import_keyword,
    special_instruction, //.redefine and other
    redefine_keyword,
    define_keyword,
    undefine_keyword,
    if_defined_keyword,
    if_not_defined_keyword,
    endif_keyword,
    stack_size_keyword,
    declare_keyword,
    main_function_keyword,
    include_keyword,
    expose_function_keyword,
    function_declaration_keyword, //function
    function_arguments_start, //(
    function_arguments_end, //)
    sizeof_argument_keyword,
    one_byte_type_keyword,
    two_bytes_type_keyword,
    four_bytes_type_keyword,
    eight_bytes_type_keyword,
    memory_type_keyword,
    function_body_start, //{
    expression_end, //;
    move_instruction_keyword,
    add_instruction_keyword,
    signed_add_instruction_keyword,
    subtract_instruction_keyword,
    signed_subtract_instruction_keyword,
    multiply_instruction_keyword,
    signed_multiply_instruction_keyword,
    divide_instruction_keyword,
    signed_divide_instruction_keyword,
    compare_instruction_keyword,
    increment_instruction_keyword,
    decrement_instruction_keyword,
    jump_instruction_keyword,
    jump_equal_instruction_keyword,
    jump_not_equal_instruction_keyword,
    jump_greater_instruction_keyword,
    jump_greater_equal_instruction_keyword,
    jump_less_instruction_keyword,
    jump_less_equal_instruction_keyword,
    jump_above_instruction_keyword,
    jump_above_equal_instruction_keyword,
    jump_below_instruction_keyword,
    jump_below_equal_instruction_keyword,
    dereference_start, //[
    dereference_end, //]
    module_call, //->
    module_return_value, //:
    jump_point, //@
    function_body_end, //}
    immediate_argument_keyword,
    new_line,
    function_address_argument_keyword,
    signed_argument_keyword,
    variable_argument_keyword,
    pointer_dereference_argument_keyword,
    no_return_module_call_keyword,
    function_call,
    jump_point_argument_keyword,
    bit_and_instruction_keyword,
    bit_or_instruction_keyword,
    bit_xor_instruction_keyword,
    bit_not_instruction_keyword,
    save_value_instruction_keyword,
    load_value_instruction_keyword,
    move_pointer_instruction_keyword,
    bit_shift_left_instruction_keyword,
    bit_shift_right_instruction_keyword,
    get_function_address_instruction_keyword,
    define_string_keyword,
    string_separator,
    string_argument_keyword,
    copy_string_instruction_keyword
};

#endif