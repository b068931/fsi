from prts import <io.log.info, pointer.allocate, pointer.deallocate>

$redefine symbol-base 48

function copy(pointer destination, pointer source, eight-bytes size)
copy {
    $declare one-byte why-not
    move variable one-byte why-not, immediate one-byte 0;

    @repeat;
    compare variable eight-bytes size, immediate eight-bytes 0;
    jump-equal point end;

    decrement variable eight-bytes size;
    /*technically pointer dereference is supported for many variables, but it is not shown anywhere so it is here for demonstration purposes*/
    move dereference one-byte destination[size, why-not], dereference one-byte source[size];
    jump point repeat;

    @end;
}

function reversed-copy(pointer destination, pointer source, eight-bytes size)
reversed-copy {
    $declare eight-bytes destination-index
    move variable eight-bytes destination-index, immediate eight-bytes 0;

    @repeat;
    compare variable eight-bytes size, immediate eight-bytes 0;
    jump-equal point end;

    decrement variable eight-bytes size;

    move dereference one-byte destination[destination-index], dereference one-byte source[size];
    increment variable eight-bytes destination-index;

    jump point repeat;
    @end;
}

function ebyte-to-string(eight-bytes value)
ebyte-to-string {
    $declare pointer result
    $declare pointer result-copy

    $declare eight-bytes result-size
    move variable eight-bytes result-size, immediate eight-bytes 0;

    $declare eight-bytes result-copy-size
    move variable eight-bytes result-copy-size, immediate eight-bytes 0;

    $declare eight-bytes symbol

    @repeat;
    divide variable eight-bytes value, immediate eight-bytes 10;
    increment variable eight-bytes result-copy-size;

    result-copy: prts->pointer.allocate(variable eight-bytes result-copy-size)
    copy(variable pointer result-copy, variable pointer result, variable eight-bytes result-size)

    result: prts->pointer.deallocate()

    load-value variable eight-bytes symbol;
    add variable eight-bytes symbol, immediate eight-bytes symbol-base;

    move dereference one-byte result-copy[result-size], variable one-byte symbol;

    move-pointer variable pointer result, variable pointer result-copy;
    move variable eight-bytes result-size, variable eight-bytes result-copy-size;

    compare variable eight-bytes value, immediate eight-bytes 0;

    jump-equal point end;
    jump point repeat;

    @end;
    increment variable eight-bytes result-copy-size;
    result-copy: prts->pointer.allocate(variable eight-bytes result-copy-size)
   
    reversed-copy(variable pointer result-copy, variable pointer result, variable eight-bytes result-size)
    result: prts->pointer.deallocate()

    save-value variable pointer result-copy;
}

function main()
main {
    $declare pointer message

    ebyte-to-string(immediate eight-bytes 22082023)
    load-value variable pointer message;

    void: prts->io.log.info(variable pointer message)
}
